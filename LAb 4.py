# Task 1.1 

# u = input() 
# result = tuple(u) 
# print(result) 

# Данный код на python сначало запрашивает у пользователя ввод данных с клавиатуры и сохраняет его в переменной u. Затем он создает 
# кортеж (tuple) с использованием символов из строки, введенной пользователем. Каждый символ строки будет представлен в кортеже как 
# отдельный элемент. 
 

# Task 1.2 

# t = ('T', 'h', 'e', 'B', 'i', 'g', 'B', 'e', 'n') 
# print(*t, sep="") 

# Этот код создает кортеж t, который содержит отдельные символы. Затем он использует функцию print с аргументами *t и sep="".
# *t распаковывает кортеж t, так что элементы кортежа становятся отдельными аргументами для функции print. sep="" означает, 
# что между элементами не будет добавлен никакой разделитель (значение "" обозначает пустую строку).

# 1.3 
# a = (1, 2, 3, 4, 5, 6, 7) 
# b = (5, 6, 7, 9, 7, 1, 10, 10) 

# h1 = a[:len(a)//2] 

# h2 = b[len(b)//2:] 

# result = h1 + h2 
# print(result) 
 

# В этом коде как видно два кортеж a и b. Затем происходит следующее:
# h1 = a[:len(a)//2]- Эта строка создает новый кортеж h1, который содержит первую половину элементов кортежа a. Используется оператор среза 
# [:] с индексом, равным половине длины кортежа a (полученной с помощью len(a)//2).

# h2 = b[len(b)//2:]- Здесь создается новый кортеж h2, который содержит вторую половину элементов кортежа b. Также используется оператор 
# среза с индексом, равным половине длины кортежа b.

# result = h1 + h2- В этой строке объединяются кортежи h1 и h2, чтобы создать новый кортеж result. Оператор + используется для конкатенации
# кортежей.

# print(result)- Затем код выводит результат на экран.

# Результатом выполнения этого кода будет новый кортеж result, содержащий первую половину элементов из кортежа a и вторую половину элементов 
# из кортежа b. Если кортежы a и b выглядят следующим образом:




# Task 1.4 

# def count(input_t): 

#     element_c = {} 

#     for element in input_t: 

#         element_str = str(element) 

#         if element_str in element_c: 

#             element_c[element_str] += 1 

#         else: 

#             element_c[element_str] = 1 

#     result_l = [(key, value) for key, value in element_c.items()] 

#     result_t = tuple(result_l) 

#     return result_t 



# input_1 = (55, 6, 777, 54, 6, 76, 7777, 1, 777, 6) 

# input_2 = (155, 6, 777, 54, 6, 7777, 9, 777, 6) 

# input_3 = ((1, 2, 3), (['A', 'B']), (1, 2, 3), (['A'])) 

# result_1 = count(input_1) 

# result_2 = count(input_2) 

# result_3 = count(input_3) 

# print("Sample Input 1 Result:", result_1) 

# print("Sample Input 2 Result:", result_2) 

# print("Sample Input 3 Result:", result_3) 


# Здесь код представляет нам функцию count, которая принимает входной кортеж input_t и возвращает кортеж result_t, содержащий уникальные
# элементы из input_t и количество их появлений.

# Если  рассмотрим код более подробно

# element_c - это словарь, который будет использоваться для подсчета количества появлений каждого элемента во входном кортеже.

# Затем происходит цикл for, который перебирает элементы входного кортежа input_t. Внутри цикла каждый элемент преобразуется в строку element_str, и затем проверяется, есть ли он уже в словаре element_c. Если элемент уже есть в словаре, его счетчик увеличивается на 1, в противном случае он добавляется в словарь со значением 1.

# result_l создает список кортежей, в которых каждый кортеж состоит из элемента и его количества появлений в исходном кортеже. Мы используем метод .items() для перебора элементов словаря.

# result_t создает кортеж из списка result_l.

# Затем код вызывает функцию count для трех разных входных кортежей: input_1, input_2, и input_3.

# Результаты функции выводятся на экран с помощью функции print.
 



#Task 1.5 

# data = (55, 6, 777, 70.0, '7', 'A') 

# result_t = [] 

# int_t = () 

# str_t = () 

# float_t = () 

# for item in data: 

#     if isinstance(item, (int)): 

#         int_t += (item,) 

#     elif isinstance(item, float): 

#         float_t += (item,) 

#     elif isinstance(item, str): 

#         str_t += (item,) 

# result_t.append(int_t) 

# result_t.append(float_t) 

# result_t.append(str_t) 

# for t in result_t: 

#     print(t) 

# Задается кортеж data, содержащий элементы разных типов данных: целые числа, числа с плавающей запятой и строки.

# Потом создаются три пустых кортежа: int_t, float_t и str_t. Эти кортежи будут использоваться для группировки элементов разных типов.

# Далее происходит цикл for, который перебирает элементы в кортеже data. Внутри цикла выполняется проверка типа каждого элемента с помощью функции 
# isinstance() и в зависимости от типа элемента, он добавляется в соответствующий кортеж int_t, float_t или str_t. Обратите внимание, что 
# после каждого добавления элемента в кортеж, кортеж пересоздается с помощью оператора += и добавляется новый элемент.

# Создается список result_t, который содержит три кортежа- int_t, float_t и str_t.

# Затем выполняется цикл for, который перебирает элементы списка result_t, и каждый кортеж выводится на экран с помощью функции print.

# Результат выполнения этого кода будет группировка элементов внутри списка data по их типам.





# Task 2.1 

# u = input() 

# result = {char for char in u} 

# print(result) 

# u = input()- Эта строка кода запрашивает у пользователя ввод с клавиатуры и сохраняет введенную строку в переменной u

# result = {char for char in u}- Здесь используется генератор множества (set comprehension) для создания множества result
# В этом множестве содержатся уникальные символы из введенной строки u. Поскольку множества не содержат дублирующихся элементов 
# все символы в result будут уникальными

# print(result)- Эта строка выводит содержимое множества result на экран





# Task 2.2 

# a = {1, 2, 3, 4, 5} 

# b = {5, 7, 8, 9, 2, 10} 

# result = a - b 

# print(result) 

# Оператор - в данном контексте используется для удаления элементов, которые присутствуют в обоих множествах, из множества a.

# Тут исходные множества:
# a содержит элементы {1, 2, 3, 4, 5}
# b содержит элементы {5, 7, 8, 9, 2, 10}

# Операция a - b удалит из множества a все элементы, которые также присутствуют в множестве b. Результат этой операции будет содержать 
# только элементы, которые были в a, но не в b.

# Таким образом, в множестве result останутся только элементы {1, 3, 4}, которые были в множестве a, но не встречаются в множестве b.
 


# Task 2.3 

# a = {1, 2, 3, 4, 5} 

# b = {5, 7, 8, 9, 2, 10} 

# b -= a 

# print(b) 

# In there короче оператор -= в данном контексте используется для удаления из множества b всех элементов, которые также присутствуют в множестве a.

# А операция b -= a удалит из множества b все элементы, которые также присутствуют в множестве a.

# Таким оброзом результат выполнения кода будет так -  {7, 8, 9, 10}
 
# в множестве b останутся только элементы {7, 8, 9, 10}, которые присутствуют в исходном b, но отсутствуют в a.



# Task 2.4 

# a = {1, 2, 3, 4, 7} 

# b = {8, 7, 9, 4, 2, 0, 10} 

# c = {4, 0, 1} 

# set_D = a.intersection(c) 

# b.update(set_D) 

# print(b) 

# Здесь код создаются три множества а,b,c и они соддержит себя разные элементы
# a {1, 2, 3, 4, 7}.
# b {8, 7, 9, 4, 2, 0, 10}.
# c {4, 0, 1}.

# set_D = a.intersection(c)- создаються новое множество set_D, которое представляет пересечение множества a и множества c. Это означает, что set_D будет содержать только те элементы, которые присутствуют и в a, и в c. В данном случае, set_D будет равно {1, 4}.

# b.update(set_D)- здесь выполняется обновление множества b путем добавления элементов из множества set_D. Это означает, что элементы из
#  set_D добавляются к множеству b.

# print(b)-выводится содержимое множества b после обновления.



# Task 2.5 


# import random 

# A = {1, 2, 3, 4, 5, 6} 
# n = 3 
# m = 5 
# result = [] 
# while len(result) < m: 
#     u = set() 
#     while len(u) < n: 
#         element = random.choice(list(A)) 
#         u.add(element) 
#     result.append(u) 

# print(result) 

 
# Интересный код был тут  код создает m множеств (где m = 5), каждое из которых содержит случайно выбранные n элементов из множества A. 

# import random: Импортируется модуль random для генерации случайных чисел.

# A - задано начальное множество {1, 2, 3, 4, 5, 6}.

# n - количество элементов, которые будут выбраны в каждом подмножестве (установлено в 3).

# m - количество подмножеств, которые будут созданы (установлено в 5).

# Создается пустой список result, который будет содержать все сгенерированные множества.

# Запускается внешний цикл while, который выполняется, пока длина списка result не достигнет значения m (то есть 5).

# Внутри внешнего цикла создается пустое множество u.

# Запускается внутренний цикл while, который выполняется, пока длина множества u не достигнет значения n (то есть 3).

# Внутри внутреннего цикла случайно выбирается элемент из множества A с помощью random.choice(list(A)) и добавляется в множество u с 
# использованием метода add(element)

# После завершения внутреннего цикла u будет содержать 3 случайно выбранных элемента из A

# u добавляется в список result

# Внешний цикл продолжает выполняться до тех пор, пока result не будет содержать 5 множеств

# В конце выводится результат, то есть 5 множеств, каждое из которых содержит 3 случайных элемента из множества A




# Task 3.1 

# from itertools import groupby 

# cars = [('Mers', 'S-class'), ('Toyota', 'Supra'), ('Lexus', 'LX'), ('Lexus', 'GS'), ('Toyota', 'Rav 4'), ('Toyota', 'Camry 70')] 

# sorted_cars = sorted(cars, key=lambda x: x[0]) 

# for manufacturer, group in groupby(sorted_cars, key=lambda x: x[0]): 

#     models = [model for _, model in group] 

#     print(f"{manufacturer} {len(models)}") 

#     for model in models: 

#         print(f"- {model}") 

# a = tuple('bat',) 

# b = tuple('man',) 

# print(f"\nTuple B = {b}") 

# print(f'\nTuple A = {a}') 

 

# a = set('bat') 

# b = set('man') 

# print(f"\nSet A = {a}" 

#       f"\nSet B = {b}" 

# f"\nUnion of sets A and B {a.union(b)}" 

# f"\nDifference of sets A and B {a.difference(b)}" 

# f"\nDifference of sets B and A {b-a}" 

# f"\nIntersection of sets A and B {a.intersection(b)}" 

# f"\nSymmetric difference of sets A and B {a.symmetric_difference(b)}") 


# Наконец я закончиваю
# импортируется функция groupby из модуля itertools

# Создается список cars, который содержит кортежи с информацией о различных машинах (производитель и модель)

# sorted_cars - список cars сортируется по производителю с помощью функции sorted, используя лямбда-функцию lambda x: x[0]
# где x[0] обозначает производителя

# Затем код использует groupby для группировки отсортированных автомобилей по производителю

# Для каждой группы автомобилей выводится производитель и список моделей, а также количество моделей у каждого производителя

# После этой части кода, создаются два кортежа a и b, каждый из которых содержит одну строку

# Далее, создаются два множества a и b, содержащие символы из строк "bat" и "man" соответственно. Выводятся различные операции с этими 
# множествами  такие как объединение, разность, пересечение и симметриическая разность.


















